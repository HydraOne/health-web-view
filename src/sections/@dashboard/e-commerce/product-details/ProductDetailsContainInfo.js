import * as React from 'react';
import {
    DataGridPro,
    useGridApiContext,
    GridEvents,
    useGridSelector,
    gridFilteredDescendantCountLookupSelector,} from '@mui/x-data-grid-pro';
import PropTypes from "prop-types";
import {Box, Button} from "@mui/material";
import {useEffect, useState} from "react";
import ProductDetailsReview from "./ProductDetailsReview";
import axios from "../../../../utils/axios";
import {ShopProductPreview} from "../shop";

const columns = [
    {
        field: 'createTime',
        headerName: '创建时间',
        type: 'date',
        width: 150,
    },
    {
        field: 'type',
        headerName: '类型',
        width: 150,
    },
    {
        field: 'price',
        headerName: '市场价'
    },
    {
        field: 'description',
        headerName: '描述信息'
    },
];

const getTreeDataPath = (row) => row.hierarchy;

ProductDetailsContainInfo.propTypes = {
    product: PropTypes.object,
};

export const isNavigationKey = (key) =>
    key === 'Home' ||
    key === 'End' ||
    key.indexOf('Arrow') === 0 ||
    key.indexOf('Page') === 0 ||
    key === ' ';

const CustomGridTreeDataGroupingCell = (props) => {
    const { id, field, rowNode,row} = props;
    const {name} = row;
    const apiRef = useGridApiContext();
    const filteredDescendantCountLookup = useGridSelector(
        apiRef,
        gridFilteredDescendantCountLookupSelector,
    );

    const filteredDescendantCount = filteredDescendantCountLookup[rowNode.id] ?? 0;

    const handleKeyDown = (event) => {
        if (event.key === ' ') {
            event.stopPropagation();
        }
        if (isNavigationKey(event.key) && !event.shiftKey) {
            apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, props, event);
        }
    };

    const handleClick = (event) => {
        apiRef.current.setRowChildrenExpansion(id, !rowNode.childrenExpanded);
        apiRef.current.setCellFocus(id, field);
        event.stopPropagation();
    };

    return (
        <Box sx={{ ml: rowNode.depth * 4 }}>
            <div >
                {filteredDescendantCount > 0 ? (
                    <Button
                        onClick={handleClick}
                        onKeyDown={handleKeyDown}
                        tabIndex={-1}
                        size="50"
                    >
                        {name}
                    </Button>
                ) : (
                    <Button
                        color="inherit"
                        size="50"
                    >
                        {name}
                    </Button>
                )}
            </div>
        </Box>
    );
};

CustomGridTreeDataGroupingCell.propTypes = {
    /**
     * The column field of the cell that triggered the event.
     */
    field: PropTypes.string.isRequired,
    /**
     * The grid row id.
     */
    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
    /**
     * The node of the row that the current cell belongs to.
     */
    rowNode: PropTypes.shape({
        /**
         * The id of the row children.
         * @default []
         */
        children: PropTypes.arrayOf(
            PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        ),
        /**
         * Current expansion status of the row.
         * @default false
         */
        childrenExpanded: PropTypes.bool,
        /**
         * 0-based depth of the row in the tree.
         */
        depth: PropTypes.number.isRequired,
        /**
         * The field used to group the children of this row.
         * Is `null` if no field has been used to group the children of this row.
         */
        groupingField: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.string])
            .isRequired,
        /**
         * The key used to group the children of this row.
         */
        groupingKey: PropTypes.oneOfType([
            PropTypes.number,
            PropTypes.string,
            PropTypes.bool,
        ]).isRequired,
        /**
         * The grid row id.
         */
        id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
        /**
         * If `true`, this node has been automatically added to fill a gap in the tree structure.
         * @default false
         */
        isAutoGenerated: PropTypes.bool,
        /**
         * The row id of the parent (null if this row is a top level row).
         */
        parent: PropTypes.oneOfType([
            PropTypes.oneOf([null]),
            PropTypes.number,
            PropTypes.string,
        ]).isRequired,
    }).isRequired,
};

export default function ProductDetailsContainInfo({ product }) {

    const [result,setResult] = useState([]);

    const [open, setOpen] = useState(false);

    const [previewContent,setPreviewContent] = useState({});

    const handleOpenPreview = (event) => {
        const {row} = event;
        const {description} = row;
        setPreviewContent({description});
        setOpen(true);
    };

    const handleClosePreview = () => {
        setOpen(false);
    };

    const eachTitle = (array,rowStack,allResult)=>{
        // const result = [];
        array.forEach(item=>{
            const row = rowStack.map(item=>item);
            row.push(item.id);
            const {price,priceSale,createTime,name,type,description} = item;
            const data = {hierarchy: row,name,price,priceSale,createTime,id:allResult.length,type,description};
            allResult.push(data);
            if (item.children.length > 0){
                eachTitle(item.children,row,allResult);
            }
        })
    }

    useEffect(async () => {
        const response = await axios.get(`/api/check/child/${product.id}`);
        const {children} = response.data;
        const currentResult = [];
        eachTitle(children,[],currentResult);
        setResult(currentResult);
    },[product.id]);

    const groupingColDef = {
        headerName: '层级',
        renderCell: (params) => <CustomGridTreeDataGroupingCell {...params} />,
    };

    return (
        <>
            <div style={{ height: 400, width: '100%' }}>
                <DataGridPro
                    disableRowGrouping
                    treeData
                    rows={result}
                    columns={columns}
                    onRowClick={handleOpenPreview}
                    getTreeDataPath={getTreeDataPath}
                    groupingColDef={groupingColDef}
                />
            </div>
            <ShopProductPreview
                values={previewContent}
                isOpen={open}
                onClose={handleClosePreview}
            />
        </>
    );
}